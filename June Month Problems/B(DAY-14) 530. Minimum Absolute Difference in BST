APPROACH 1:   TC-->O(N)  SC-->O(N)
----------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer>list=new ArrayList<>();
    public int getMinimumDifference(TreeNode root) {
        if(root==null)return 0;
        dfs(root,list);
        int ans=Integer.MAX_VALUE;
        for(int i=0;i<list.size()-1;i++){
            ans=Math.min(ans,Math.abs(list.get(i)-list.get(i+1)));
        }
        return ans;
    }
    void dfs(TreeNode root,ArrayList<Integer>list){
        if(root==null)return;

        dfs(root.left,list);
        list.add(root.val);
        dfs(root.right,list);        
    }
}










APPROACH 2:  TC-->O(N)  SC-->O(1)
---------------------------------

 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans=Integer.MAX_VALUE,prev=-100000;
    public int getMinimumDifference(TreeNode root) {
        if(root==null)return 0;
        dfs(root);
        return ans;
    }
    void dfs(TreeNode root){
        if(root==null)return;

        dfs(root.left);
        ans=Math.min(ans,Math.abs(root.val-prev));
        System.out.println("Hi: "+ans);
        prev=root.val;
        dfs(root.right);        
    }
}
