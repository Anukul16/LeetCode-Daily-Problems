class Solution {
    int dp[][] = new int[500001][2];

    public int solve(int[] prices, int idx, int n, int fee, int buy) {
        // Base case: If index is beyond the array length, return 0
        if (idx >= n)
            return 0;

        // Check if the result is already calculated and stored in the dp array
        if (dp[idx][buy] != 0)
            return dp[idx][buy];

        int profit = 0;

        if (buy == 1) {
            // If buying, calculate the profit after buying the stock and skipping the fee
            int Buy = solve(prices, idx + 1, n, fee, 0) - prices[idx] - fee;

            // If not buying, calculate the profit without buying the stock
            int notBuy = solve(prices, idx + 1, n, fee, 1);

            profit = Math.max(Buy, notBuy);
        } else {
            // If selling, calculate the profit after selling the stock
            int Sell = prices[idx] + solve(prices, idx + 1, n, fee, 1);

            // If not selling, calculate the profit without selling the stock
            int notSell = solve(prices, idx + 1, n, fee, 0);

            profit = Math.max(Sell, notSell);
        }

        // Store the calculated profit in the dp array for memoization
        dp[idx][buy] = profit;
        return profit;
    }

    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        return solve(prices, 0, n, fee, 1);
    }
}
