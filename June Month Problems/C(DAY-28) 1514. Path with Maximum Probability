class Pair {
    int node;
    double probability;
    
    Pair(int node, double probability) {
        this.node = node;
        this.probability = probability;
    }
}

class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        // Create an adjacency list to represent the graph
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        
        // Build the adjacency list using the given edges and probabilities
        for (int i = 0; i < edges.length; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            double prob = succProb[i];
            adj.get(u).add(new Pair(v, prob));
            adj.get(v).add(new Pair(u, prob));
        }
        
        // Initialize an array to store the maximum probabilities
        double[] ans = new double[n];
        Arrays.fill(ans, 0.0);
        ans[start] = 1.0;  // Set the initial probability of the start node to 1.0
        
        // Create a priority queue to track the nodes with maximum probabilities
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Double.compare(b.probability, a.probability));
        pq.add(new Pair(start, ans[start]));
        
        // Apply Dijkstra's algorithm to find the maximum probability path
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            int currNode = p.node;
            double currProb = p.probability;
            
            // Explore neighbors of the current node
            for (Pair temp : adj.get(currNode)) {
                int neighborNode = temp.node;
                double neighborProb = temp.probability;
                
                // Update the maximum probability if a higher probability is found
                if (ans[neighborNode] < currProb * neighborProb) {
                    ans[neighborNode] = currProb * neighborProb;
                    pq.add(new Pair(neighborNode, ans[neighborNode]));
                }
            }
        }
        
        // Return the maximum probability at the end node
        return ans[end];
    }
}
