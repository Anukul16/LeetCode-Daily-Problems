class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        // Create an array of lists to represent the hierarchy
        List<Integer>[] arr = new ArrayList[n];
        int ans = 0;

        // Initialize each element in the array with an empty list
        for (int i = 0; i < n; i++) {
            arr[i] = new ArrayList<>();
        }

        // Build the hierarchy by adding subordinates to their respective managers
        for (int i = 0; i < n; i++) {
            if (manager[i] != -1) {
                arr[manager[i]].add(i);
            }
        }

        // Use a queue to perform a breadth-first search starting from the head
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        q.offer(new Pair<>(headID, informTime[headID]));

        while (!q.isEmpty()) {
            int si = q.size();

            // Process each level of the hierarchy
            for (int i = 0; i < si; i++) {
                Pair<Integer, Integer> t = q.poll();

                // Check each subordinate of the current manager
                for (int x : arr[t.getKey()]) {
                    if (informTime[x] == 0) {
                        // If the subordinate has no further subordinates, update the maximum time
                        ans = Math.max(ans, t.getValue());
                    } else {
                        // If the subordinate has further subordinates, add them to the queue with updated time
                        q.offer(new Pair<>(x, t.getValue() + informTime[x]));
                    }
                }
            }
        }

        // Return the maximum time required to inform all employees
        return ans;
    }
}
