class Solution {
    public long totalCost(int[] costs, int k, int candidates) {
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        PriorityQueue<Integer>pq2=new PriorityQueue<>();

        int left=0,right=costs.length-1;
        long ans=0;
        while(k-- >0){

            while(pq.size()<candidates && left<=right){
                pq.add(costs[left]);
                left++;
            }
            while(pq2.size()<candidates && left<=right){
                pq2.add(costs[right]);
                right--;
            }
            int topOfPq=pq.size()>0 ? pq.peek() : Integer.MAX_VALUE; // if the priority queue is empty 
            int topOfPq2=pq2.size()>0 ? pq2.peek() : Integer.MAX_VALUE;
            if(topOfPq<=topOfPq2){
                ans+=pq.poll();
            }else{
                ans+=pq2.poll();
            }
        }       
        return ans;
    }
}
