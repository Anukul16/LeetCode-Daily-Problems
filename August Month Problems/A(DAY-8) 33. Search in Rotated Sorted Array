APPROACH 1 
----------

class Solution {
    public int findPivot(int[]nums,int n){
        int l=0,r=n-1;
        while(l<r){
            int mid=l+(r-l)/2;
            if(nums[mid]>nums[r]){
                l=mid+1;
            }else{
                r=mid;// mid could be answer 
            }
        }
        return l;
    }
    public int binarySearch(int l,int r,int[]nums,int target){
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target)return mid;
            else if(nums[mid]>target)r=mid-1;
            else l=mid+1;
        }
        return -1;
    }
    public int search(int[] nums, int target) {
        int n=nums.length;

        int pivot_index=findPivot(nums,n);

        int idx=binarySearch(0,pivot_index-1,nums,target);
        if(idx!=-1)return idx;
        idx=binarySearch(pivot_index,n-1,nums,target);
        return idx;

    }
}
/*
APPROACH

FINDING THE PIVOT INDEX(SMALLEST ELEMENT INDEX) FIRST . CAUSE FROM START TO PIVOT INDEX WILL BE SORTED AND PIVOT INDEX TO TILL LAST WILL BE SORTED. 
THEN DO BINARY SEARCH FOR THAT TWO PARTS AND RETURN THE ANSWER  

*/









APPROACH 2
----------
class Solution {
    public int search(int[] nums, int target) {
        int n=nums.length;

        int left=0,right=n-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target)return mid;
            else if(nums[left]<=nums[mid]){//LEFT PART IS SORTED
                if(nums[left]<=target && target<=nums[mid]){// IF TARGET LIES IN THE LEFT PART
                    right=mid-1;
                }else{
                    left=mid+1;
                }
            }else{ // RIGHT PART IS SORTED
                if(nums[mid]<=target && target<=nums[right]){
                    left=mid+1;
                }else{
                    right=mid-1;
                }
            }
        }  
        return -1;
    }
}
/*
APPROACH 

IF NUMS[MID]==TARGET RETURN MID

IF NUMS[LEFT]<NUMS[MID] IT MEANS LEFT PART IS SORTED FOR SURE . THEN CHECK THAT THE TARGET IS LIES OR NOT IN THE LEFT PART . IF IT LIES THEN REMOVE THE RIGHT PART BY DOING RIGHT=MID-1 OR ELSE MEANS IF IT DOES NOT LIE THEN REMOVE THE LEFT PART BY DOING LEFT=MID+1

IF IT GOES TO THE ELSE PART IT MEANS RIGHT PART IS SORTED FOR SURE. THEN CHECK THAT THE TARGET LIES OR NOT IN THE RIGHT PART . IF IT LIES THEN REMOVE THE LEFT PART BY DOING LEFT=MID+1 OR ELSE MEANS IF IT DOES NOT LIE THEN REMOVE THE RIGHT PART BY DOING RIGHT=MID-1

*/
